# -*- coding: utf-8 -*-

"""
Django settings for studentsdb project.

Generated by 'django-admin startproject' using Django 1.9.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'jw=h3fh9=vlc0e-2&-h^#!j&m2-tun%c++*#_fz(=*&=%0q81%'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

CRISPY_TEMPLATE_PACK = 'bootstrap3'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.sites',
    'django.contrib.flatpages',

    'crispy_forms',
    'students',
    'contact', 
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'studentsdb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'students.context_processors.get_groups_proc',
                'studentsdb.context_processors.students_proc',
            ],
        },
    },
]

WSGI_APPLICATION = 'studentsdb.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR,'..','db.sqlite3'),
#    }
#}

from .db import DATABASES, GOOGLE_SMTP


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'uk-uk'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False # Змінив на False щоб працбвала фільтрація: exams = exams.filter(date_time__month = 5)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

PORTAL_URL = 'http://localhost:8000'


# Всановлюємо  MEDIA_URL та MEDIA_ROOT як описано на сторінці 219 книги Віталія Подоби

MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, '..', 'media')


# email settings для Gmail SMTP сервера
ADMIN_EMAIL = 'xai_kbu@ukr.net'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = '465'
EMAIL_HOST_USER = 'xai1983kbu@gmail.com'
EMAIL_HOST_PASSWORD = GOOGLE_SMTP
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True


# for django contact-form 
SITE_ID = 1
DEFAULT_FROM_EMAIL = 'xai1983kbu@gmail.com'
MANAGERS = [('my','xai_kbu@ukr.net'), ('my2','xai_kbu@i.ua')]

LOG_FILE = os.path.join(BASE_DIR, 'studentsdb.log')
LOG_FILE_FOR_COUNT_HTTP_REQUESTS = os.path.join(BASE_DIR, 'count_http_requests.log')
LOG_FILE_FOR_MIGRATE = os.path.join(BASE_DIR, 'migrate_db.log')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'skip_fast_sql_query': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: record.duration > 0.1
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue'
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
    },
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s: %(message)s'
        },
        'simple': {
            'format': '%(levelname)s: %(message)s'
        },
        'simple2': {
            'format': '%(duration)s  %(sql)s: %(message)s'
        }
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler'
        },
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'console2': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple2'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOG_FILE,
            'formatter': 'verbose'
        },
        'file2': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.FileHandler',
            'filename': LOG_FILE_FOR_COUNT_HTTP_REQUESTS,
            'formatter': 'verbose'
        },
        'file3': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.FileHandler',
            'filename': LOG_FILE_FOR_MIGRATE,
            'formatter': 'verbose'
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
             #'email_backend': 'django.core.mail.backends.console.EmailBackend',
            'include_html': True
        }
    },
    'loggers': {
        'django': {
            'handlers': ['null', 'mail_admins'],
            'propagate': True,
            'level': 'INFO'
        },
        'students.signals': {
            'handlers': ['console', 'file'],
            'level': 'INFO'
        },
        'students.views.contact_admin': {
            'handlers': ['console', 'file'],
            'level': 'INFO'
        },
        'django.db.backends': {
            'handlers': ['console2'],
            'level': 'DEBUG',
            'filters': ['skip_fast_sql_query']
        },
        'students.signals.count_http_requests': {
            'handlers': ['file2'],
            'propagate': False,
            'level': 'INFO'
        },
        'students.signals.migrate_db': {
            'handlers': ['console2', 'file3'],
            'propagate': False,
            'level': 'INFO'
        }
    }
}

# for mail_admins handler
ADMINS = (
    ('admin', 'xai_kbu@ukr.net'),
)

# for Redis database
REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 1